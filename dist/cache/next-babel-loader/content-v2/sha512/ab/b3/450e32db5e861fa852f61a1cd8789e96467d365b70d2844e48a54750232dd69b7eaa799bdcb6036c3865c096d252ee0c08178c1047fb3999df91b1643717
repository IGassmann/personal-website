{"ast":null,"code":"import fs from 'fs';\nimport matter from 'gray-matter';\nimport { join } from 'path';\nvar postsDirectory = join(process.cwd(), 'src', 'content', 'posts');\nexport function getPostSlugs() {\n  return fs.readdirSync(postsDirectory);\n}\nexport function getPostBySlug(slug) {\n  var fields = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var realSlug = slug.replace(/\\.md$/, '');\n  var fullPath = join(postsDirectory, \"\".concat(realSlug, \".md\"));\n  var fileContent = fs.readFileSync(fullPath, 'utf8');\n\n  var _matter = matter(fileContent),\n      data = _matter.data,\n      content = _matter.content;\n\n  var items = {}; // Ensure only the minimal needed data is exposed\n\n  fields.forEach(function (field) {\n    if (field === 'slug') {\n      items[field] = realSlug;\n    }\n\n    if (field === 'content') {\n      items[field] = content;\n    }\n\n    if (data[field]) {\n      items[field] = data[field];\n    }\n  });\n  return items;\n}\nexport function getAllPosts() {\n  var fields = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var slugs = getPostSlugs();\n  return slugs.map(function (slug) {\n    return getPostBySlug(slug, fields);\n  }) // sort posts by publishedAt in descending order\n  .sort(function (post1, post2) {\n    return post1.publishedAt > post2.publishedAt ? -1 : 1;\n  });\n}\nexport function getPostsByCategorySlug(categorySlug) {\n  var fields = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n}\nexport function getPostsByTagSlug(tagSlug) {\n  var fields = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n}\nexport function getAllCategories() {\n  var slugs = getPostSlugs();\n  return slugs.map(function (slug) {\n    return getPostBySlug(slug, fields);\n  }) // sort posts by publishedAt in descending order\n  .sort(function (post1, post2) {\n    return post1.publishedAt > post2.publishedAt ? -1 : 1;\n  });\n}\nexport function getAllTags() {\n  var slugs = getPostSlugs();\n  return slugs.map(function (slug) {\n    return getPostBySlug(slug, fields);\n  }) // sort posts by publishedAt in descending order\n  .sort(function (post1, post2) {\n    return post1.publishedAt > post2.publishedAt ? -1 : 1;\n  });\n}","map":{"version":3,"sources":["/Users/IGassmann/Developer/IGassmann/personal-website/src/lib/api.js"],"names":["fs","matter","join","postsDirectory","process","cwd","getPostSlugs","readdirSync","getPostBySlug","slug","fields","realSlug","replace","fullPath","fileContent","readFileSync","data","content","items","forEach","field","getAllPosts","slugs","map","sort","post1","post2","publishedAt","getPostsByCategorySlug","categorySlug","getPostsByTagSlug","tagSlug","getAllCategories","getAllTags"],"mappings":"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","sourcesContent":["import fs from 'fs';\nimport matter from 'gray-matter';\nimport { join } from 'path';\n\nconst postsDirectory = join(process.cwd(), 'src', 'content', 'posts');\n\nexport function getPostSlugs() {\n  return fs.readdirSync(postsDirectory);\n}\n\nexport function getPostBySlug(slug, fields = []) {\n  const realSlug = slug.replace(/\\.md$/, '');\n  const fullPath = join(postsDirectory, `${realSlug}.md`);\n  const fileContent = fs.readFileSync(fullPath, 'utf8');\n  const { data, content } = matter(fileContent);\n\n  const items = {};\n\n  // Ensure only the minimal needed data is exposed\n  fields.forEach((field) => {\n    if (field === 'slug') {\n      items[field] = realSlug;\n    }\n    if (field === 'content') {\n      items[field] = content;\n    }\n\n    if (data[field]) {\n      items[field] = data[field];\n    }\n  });\n\n  return items;\n}\n\nexport function getAllPosts(fields = []) {\n  const slugs = getPostSlugs();\n  return slugs\n    .map((slug) => getPostBySlug(slug, fields))\n    // sort posts by publishedAt in descending order\n    .sort((post1, post2) => (post1.publishedAt > post2.publishedAt ? -1 : 1));\n}\n\nexport function getPostsByCategorySlug(categorySlug, fields = []) {\n\n}\n\nexport function getPostsByTagSlug(tagSlug, fields = []) {\n\n}\n\nexport function getAllCategories() {\n  const slugs = getPostSlugs();\n  return slugs\n    .map((slug) => getPostBySlug(slug, fields))\n    // sort posts by publishedAt in descending order\n    .sort((post1, post2) => (post1.publishedAt > post2.publishedAt ? -1 : 1));\n}\n\nexport function getAllTags() {\n  const slugs = getPostSlugs();\n  return slugs\n    .map((slug) => getPostBySlug(slug, fields))\n    // sort posts by publishedAt in descending order\n    .sort((post1, post2) => (post1.publishedAt > post2.publishedAt ? -1 : 1));\n}"]},"metadata":{},"sourceType":"module"}