{"ast":null,"code":"import { ICONS } from '@/constants';\nimport fs from 'fs';\nimport matter from 'gray-matter';\nimport { join } from 'path';\nvar postsDirectory = join(process.cwd(), 'src', 'content', 'posts');\nexport function getPostSlugs() {\n  return fs.readdirSync(postsDirectory);\n}\nexport function getPostBySlug(postSlug) {\n  var fields = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var realSlug = postSlug.replace(/\\.md$/, '');\n  var fullPath = join(postsDirectory, \"\".concat(realSlug, \".md\"));\n  var fileContent = fs.readFileSync(fullPath, 'utf8');\n\n  var _matter = matter(fileContent),\n      data = _matter.data,\n      content = _matter.content;\n\n  var items = {}; // Ensure only the minimal needed data is exposed\n\n  fields.forEach(function (field) {\n    if (field === 'slug') {\n      items[field] = realSlug;\n    }\n\n    if (field === 'content') {\n      items[field] = content;\n    }\n\n    if (data[field]) {\n      items[field] = data[field];\n    }\n  });\n  return items;\n}\nexport function getAllPosts() {\n  var fields = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var slugs = getPostSlugs();\n  return slugs.map(function (slug) {\n    return getPostBySlug(slug, fields);\n  }) // sort posts by publishedAt in descending order\n  .sort(function (post1, post2) {\n    return post1.publishedAt > post2.publishedAt ? -1 : 1;\n  });\n}\nexport function getContactHref(name, contact) {\n  var href;\n\n  switch (name) {\n    case 'twitter':\n      href = \"https://www.twitter.com/\".concat(contact);\n      break;\n\n    case 'github':\n      href = \"https://github.com/\".concat(contact);\n      break;\n\n    case 'email':\n      href = \"mailto:\".concat(contact);\n      break;\n\n    case 'linkedin':\n      href = \"https://www.linkedin.com/in/\".concat(contact);\n      break;\n\n    default:\n      href = contact;\n      break;\n  }\n\n  return href;\n}\nexport function getIcon(name) {\n  var icon;\n\n  switch (name) {\n    case 'twitter':\n      icon = ICONS.TWITTER;\n      break;\n\n    case 'github':\n      icon = ICONS.GITHUB;\n      break;\n\n    case 'email':\n      icon = ICONS.EMAIL;\n      break;\n\n    case 'rss':\n      icon = ICONS.RSS;\n      break;\n\n    case 'linkedin':\n      icon = ICONS.LINKEDIN;\n      break;\n\n    default:\n      icon = {};\n      break;\n  }\n\n  return icon;\n}","map":{"version":3,"sources":["/Users/IGassmann/Developer/IGassmann/personal-website/src/lib/api.js"],"names":["ICONS","fs","matter","join","postsDirectory","process","cwd","getPostSlugs","readdirSync","getPostBySlug","postSlug","fields","realSlug","replace","fullPath","fileContent","readFileSync","data","content","items","forEach","field","getAllPosts","slugs","map","slug","sort","post1","post2","publishedAt","getContactHref","name","contact","href","getIcon","icon","TWITTER","GITHUB","EMAIL","RSS","LINKEDIN"],"mappings":"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","sourcesContent":["import { ICONS } from '@/constants';\nimport fs from 'fs';\nimport matter from 'gray-matter';\nimport { join } from 'path';\n\nconst postsDirectory = join(process.cwd(), 'src', 'content', 'posts');\n\nexport function getPostSlugs() {\n  return fs.readdirSync(postsDirectory);\n}\n\nexport function getPostBySlug(postSlug, fields = []) {\n  const realSlug = postSlug.replace(/\\.md$/, '');\n  const fullPath = join(postsDirectory, `${realSlug}.md`);\n  const fileContent = fs.readFileSync(fullPath, 'utf8');\n  const { data, content } = matter(fileContent);\n\n  const items = {};\n\n  // Ensure only the minimal needed data is exposed\n  fields.forEach((field) => {\n    if (field === 'slug') {\n      items[field] = realSlug;\n    }\n    if (field === 'content') {\n      items[field] = content;\n    }\n\n    if (data[field]) {\n      items[field] = data[field];\n    }\n  });\n\n  return items;\n}\n\nexport function getAllPosts(fields = []) {\n  const slugs = getPostSlugs();\n  return slugs\n    .map((slug) => getPostBySlug(slug, fields))\n    // sort posts by publishedAt in descending order\n    .sort((post1, post2) => (post1.publishedAt > post2.publishedAt ? -1 : 1));\n}\n\nexport function getContactHref(name, contact) {\n  let href;\n\n  switch (name) {\n    case 'twitter':\n      href = `https://www.twitter.com/${contact}`;\n      break;\n    case 'github':\n      href = `https://github.com/${contact}`;\n      break;\n    case 'email':\n      href = `mailto:${contact}`;\n      break;\n    case 'linkedin':\n      href = `https://www.linkedin.com/in/${contact}`;\n      break;\n    default:\n      href = contact;\n      break;\n  }\n\n  return href;\n}\n\nexport function getIcon(name) {\n  let icon;\n\n  switch (name) {\n    case 'twitter':\n      icon = ICONS.TWITTER;\n      break;\n    case 'github':\n      icon = ICONS.GITHUB;\n      break;\n    case 'email':\n      icon = ICONS.EMAIL;\n      break;\n    case 'rss':\n      icon = ICONS.RSS;\n      break;\n    case 'linkedin':\n      icon = ICONS.LINKEDIN;\n      break;\n    default:\n      icon = {};\n      break;\n  }\n\n  return icon;\n}\n"]},"metadata":{},"sourceType":"module"}