{"ast":null,"code":"import fs from 'fs';\nimport matter from 'gray-matter';\nimport { join } from 'path';\nconst postsDirectory = join(process.cwd(), 'src', 'content', 'posts');\nexport function getPostSlugs() {\n  return fs.readdirSync(postsDirectory);\n}\nexport function getPostBySlug(postSlug, fields = []) {\n  const realSlug = postSlug.replace(/\\.md$/, '');\n  const fullPath = join(postsDirectory, `${realSlug}.md`);\n  const fileContent = fs.readFileSync(fullPath, 'utf8');\n  const {\n    data,\n    content\n  } = matter(fileContent);\n  const items = {}; // Ensure only the minimal needed data is exposed\n\n  fields.forEach(field => {\n    if (field === 'slug') {\n      items[field] = realSlug;\n    }\n\n    if (field === 'content') {\n      items[field] = content;\n    }\n\n    if (data[field]) {\n      items[field] = data[field];\n    }\n  });\n  return items;\n}\nexport function getAllPosts(fields = []) {\n  const slugs = getPostSlugs();\n  return slugs.map(slug => getPostBySlug(slug, fields)) // sort posts by publishedAt in descending order\n  .sort((post1, post2) => post1.publishedAt > post2.publishedAt ? -1 : 1);\n}\nexport function getPostsByCategorySlug(categorySlug, fields = []) {}\nexport function getPostsByTagSlug(tagSlug, fields = []) {}\nexport function getAllCategories() {\n  const slugs = getPostSlugs();\n  return slugs.map(slug => getPostBySlug(slug, fields)) // sort posts by publishedAt in descending order\n  .sort((post1, post2) => post1.publishedAt > post2.publishedAt ? -1 : 1);\n}\nexport function getAllTags() {\n  const slugs = getPostSlugs();\n  return slugs.map(slug => getPostBySlug(slug, fields)) // sort posts by publishedAt in descending order\n  .sort((post1, post2) => post1.publishedAt > post2.publishedAt ? -1 : 1);\n}","map":{"version":3,"sources":["/Users/IGassmann/Developer/IGassmann/personal-website/src/lib/api.js"],"names":["fs","matter","join","postsDirectory","process","cwd","getPostSlugs","readdirSync","getPostBySlug","postSlug","fields","realSlug","replace","fullPath","fileContent","readFileSync","data","content","items","forEach","field","getAllPosts","slugs","map","slug","sort","post1","post2","publishedAt","getPostsByCategorySlug","categorySlug","getPostsByTagSlug","tagSlug","getAllCategories","getAllTags"],"mappings":"AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAASC,IAAT,QAAqB,MAArB;AAEA,MAAMC,cAAc,GAAGD,IAAI,CAACE,OAAO,CAACC,GAAR,EAAD,EAAgB,KAAhB,EAAuB,SAAvB,EAAkC,OAAlC,CAA3B;AAEA,OAAO,SAASC,YAAT,GAAwB;AAC7B,SAAON,EAAE,CAACO,WAAH,CAAeJ,cAAf,CAAP;AACD;AAED,OAAO,SAASK,aAAT,CAAuBC,QAAvB,EAAiCC,MAAM,GAAG,EAA1C,EAA8C;AACnD,QAAMC,QAAQ,GAAGF,QAAQ,CAACG,OAAT,CAAiB,OAAjB,EAA0B,EAA1B,CAAjB;AACA,QAAMC,QAAQ,GAAGX,IAAI,CAACC,cAAD,EAAkB,GAAEQ,QAAS,KAA7B,CAArB;AACA,QAAMG,WAAW,GAAGd,EAAE,CAACe,YAAH,CAAgBF,QAAhB,EAA0B,MAA1B,CAApB;AACA,QAAM;AAAEG,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBhB,MAAM,CAACa,WAAD,CAAhC;AAEA,QAAMI,KAAK,GAAG,EAAd,CANmD,CAQnD;;AACAR,EAAAA,MAAM,CAACS,OAAP,CAAgBC,KAAD,IAAW;AACxB,QAAIA,KAAK,KAAK,MAAd,EAAsB;AACpBF,MAAAA,KAAK,CAACE,KAAD,CAAL,GAAeT,QAAf;AACD;;AACD,QAAIS,KAAK,KAAK,SAAd,EAAyB;AACvBF,MAAAA,KAAK,CAACE,KAAD,CAAL,GAAeH,OAAf;AACD;;AAED,QAAID,IAAI,CAACI,KAAD,CAAR,EAAiB;AACfF,MAAAA,KAAK,CAACE,KAAD,CAAL,GAAeJ,IAAI,CAACI,KAAD,CAAnB;AACD;AACF,GAXD;AAaA,SAAOF,KAAP;AACD;AAED,OAAO,SAASG,WAAT,CAAqBX,MAAM,GAAG,EAA9B,EAAkC;AACvC,QAAMY,KAAK,GAAGhB,YAAY,EAA1B;AACA,SAAOgB,KAAK,CACTC,GADI,CACCC,IAAD,IAAUhB,aAAa,CAACgB,IAAD,EAAOd,MAAP,CADvB,EAEL;AAFK,GAGJe,IAHI,CAGC,CAACC,KAAD,EAAQC,KAAR,KAAmBD,KAAK,CAACE,WAAN,GAAoBD,KAAK,CAACC,WAA1B,GAAwC,CAAC,CAAzC,GAA6C,CAHjE,CAAP;AAID;AAED,OAAO,SAASC,sBAAT,CAAgCC,YAAhC,EAA8CpB,MAAM,GAAG,EAAvD,EAA2D,CAEjE;AAED,OAAO,SAASqB,iBAAT,CAA2BC,OAA3B,EAAoCtB,MAAM,GAAG,EAA7C,EAAiD,CAEvD;AAED,OAAO,SAASuB,gBAAT,GAA4B;AACjC,QAAMX,KAAK,GAAGhB,YAAY,EAA1B;AACA,SAAOgB,KAAK,CACTC,GADI,CACCC,IAAD,IAAUhB,aAAa,CAACgB,IAAD,EAAOd,MAAP,CADvB,EAEL;AAFK,GAGJe,IAHI,CAGC,CAACC,KAAD,EAAQC,KAAR,KAAmBD,KAAK,CAACE,WAAN,GAAoBD,KAAK,CAACC,WAA1B,GAAwC,CAAC,CAAzC,GAA6C,CAHjE,CAAP;AAID;AAED,OAAO,SAASM,UAAT,GAAsB;AAC3B,QAAMZ,KAAK,GAAGhB,YAAY,EAA1B;AACA,SAAOgB,KAAK,CACTC,GADI,CACCC,IAAD,IAAUhB,aAAa,CAACgB,IAAD,EAAOd,MAAP,CADvB,EAEL;AAFK,GAGJe,IAHI,CAGC,CAACC,KAAD,EAAQC,KAAR,KAAmBD,KAAK,CAACE,WAAN,GAAoBD,KAAK,CAACC,WAA1B,GAAwC,CAAC,CAAzC,GAA6C,CAHjE,CAAP;AAID","sourcesContent":["import fs from 'fs';\nimport matter from 'gray-matter';\nimport { join } from 'path';\n\nconst postsDirectory = join(process.cwd(), 'src', 'content', 'posts');\n\nexport function getPostSlugs() {\n  return fs.readdirSync(postsDirectory);\n}\n\nexport function getPostBySlug(postSlug, fields = []) {\n  const realSlug = postSlug.replace(/\\.md$/, '');\n  const fullPath = join(postsDirectory, `${realSlug}.md`);\n  const fileContent = fs.readFileSync(fullPath, 'utf8');\n  const { data, content } = matter(fileContent);\n\n  const items = {};\n\n  // Ensure only the minimal needed data is exposed\n  fields.forEach((field) => {\n    if (field === 'slug') {\n      items[field] = realSlug;\n    }\n    if (field === 'content') {\n      items[field] = content;\n    }\n\n    if (data[field]) {\n      items[field] = data[field];\n    }\n  });\n\n  return items;\n}\n\nexport function getAllPosts(fields = []) {\n  const slugs = getPostSlugs();\n  return slugs\n    .map((slug) => getPostBySlug(slug, fields))\n    // sort posts by publishedAt in descending order\n    .sort((post1, post2) => (post1.publishedAt > post2.publishedAt ? -1 : 1));\n}\n\nexport function getPostsByCategorySlug(categorySlug, fields = []) {\n\n}\n\nexport function getPostsByTagSlug(tagSlug, fields = []) {\n\n}\n\nexport function getAllCategories() {\n  const slugs = getPostSlugs();\n  return slugs\n    .map((slug) => getPostBySlug(slug, fields))\n    // sort posts by publishedAt in descending order\n    .sort((post1, post2) => (post1.publishedAt > post2.publishedAt ? -1 : 1));\n}\n\nexport function getAllTags() {\n  const slugs = getPostSlugs();\n  return slugs\n    .map((slug) => getPostBySlug(slug, fields))\n    // sort posts by publishedAt in descending order\n    .sort((post1, post2) => (post1.publishedAt > post2.publishedAt ? -1 : 1));\n}"]},"metadata":{},"sourceType":"module"}