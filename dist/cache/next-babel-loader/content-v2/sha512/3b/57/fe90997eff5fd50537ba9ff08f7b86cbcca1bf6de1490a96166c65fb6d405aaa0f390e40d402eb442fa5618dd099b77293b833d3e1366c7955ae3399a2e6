{"ast":null,"code":"var _jsxFileName = \"/Users/IGassmann/Developer/IGassmann/personal-website/src/pages/blog/page/[pageIndex].js\";\nvar __jsx = React.createElement;\nimport PostFeed from '@/components/Feed';\nimport Layout from '@/components/Layout';\nimport Pagination from '@/components/Pagination';\nimport React from 'react';\nexport var __N_SSG = true;\nexport default function BlogIndexPage(_ref) {\n  var siteTitle = _ref.siteTitle,\n      siteSubtitle = _ref.siteSubtitle,\n      posts = _ref.posts,\n      currentPage = _ref.currentPage,\n      numberOfPages = _ref.numberOfPages;\n  var pageTitle = currentPage > 0 ? \"Posts - Page \".concat(currentPage, \" - \").concat(siteTitle) : siteTitle;\n  return __jsx(Layout, {\n    pageTitle: pageTitle,\n    pageDescription: siteSubtitle,\n    isIndex: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 5\n    }\n  }, __jsx(PostFeed, {\n    posts: posts,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }\n  }), __jsx(Pagination, {\n    currentPage: currentPage,\n    numberOfPages: numberOfPages,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }\n  }));\n}\n_c = BlogIndexPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"BlogIndexPage\");","map":{"version":3,"sources":["/Users/IGassmann/Developer/IGassmann/personal-website/src/pages/blog/page/[pageIndex].js"],"names":["PostFeed","Layout","Pagination","React","BlogIndexPage","siteTitle","siteSubtitle","posts","currentPage","numberOfPages","pageTitle"],"mappings":";;AAAA,OAAOA,QAAP,MAAqB,mBAArB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AAEA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,eAAe,SAASC,aAAT,OAAuF;AAAA,MAA9DC,SAA8D,QAA9DA,SAA8D;AAAA,MAAnDC,YAAmD,QAAnDA,YAAmD;AAAA,MAArCC,KAAqC,QAArCA,KAAqC;AAAA,MAA9BC,WAA8B,QAA9BA,WAA8B;AAAA,MAAjBC,aAAiB,QAAjBA,aAAiB;AACpG,MAAMC,SAAS,GAAGF,WAAW,GAAG,CAAd,0BAAkCA,WAAlC,gBAAmDH,SAAnD,IAAiEA,SAAnF;AAEA,SACE,MAAC,MAAD;AAAQ,IAAA,SAAS,EAAEK,SAAnB;AAA8B,IAAA,eAAe,EAAEJ,YAA/C;AAA6D,IAAA,OAAO,MAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,QAAD;AAAU,IAAA,KAAK,EAAEC,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,UAAD;AACE,IAAA,WAAW,EAAEC,WADf;AAEE,IAAA,aAAa,EAAEC,aAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AASD;KAZuBL,a","sourcesContent":["import PostFeed from '@/components/Feed';\nimport Layout from '@/components/Layout';\nimport Pagination from '@/components/Pagination';\nimport { getAllPosts } from '@/lib/api';\nimport React from 'react';\n\nexport default function BlogIndexPage({ siteTitle, siteSubtitle, posts, currentPage, numberOfPages }) {\n  const pageTitle = currentPage > 0 ? `Posts - Page ${currentPage} - ${siteTitle}` : siteTitle;\n\n  return (\n    <Layout pageTitle={pageTitle} pageDescription={siteSubtitle} isIndex>\n      <PostFeed posts={posts} />\n      <Pagination\n        currentPage={currentPage}\n        numberOfPages={numberOfPages}\n      />\n    </Layout>\n  );\n}\n\nexport async function getStaticProps({ params: { pageIndex = 1 } }) {\n  const page = parseInt((ctx.params && ctx.params.page_index) || '1')\n\n  const { default: { title, description, postsPerPage } } = await import('@/site.config')\n\n  const posts = getAllPosts([\n    'title',\n    'description',\n    'category',\n    'publishedAt',\n    'slug',\n  ]);\n\n  // for pagination and ordering\n  const numberOfPages = Math.ceil(posts.length / postsPerPage)\n  pageIndex = pageIndex - 1\n  const paginatedPosts = posts.slice(\n    pageIndex * postsPerPage,\n    (pageIndex + 1) * postsPerPage\n  )\n\n  return {\n    props: {\n      siteTitle: title,\n      siteSubtitle: description,\n      posts: paginatedPosts,\n      currentPage: pageIndex,\n      numberOfPages,\n    },\n  };\n}\n\nexport async function getStaticPaths() {\n  const { default: { postsPerPage } } = await import('@/site.config')\n\n  const posts = getAllPosts(['slug']);\n\n  const numberOfPages = Math.ceil(posts.length / postsPerPage)\n\n  let pagePaths = [];\n  for (let index = 1; index <= numberOfPages; index++) {\n    pagePaths.push({\n      params: { pageIndex: index.toString() },\n    })\n  }\n\n  return { paths: pagePaths, fallback: false };\n}"]},"metadata":{},"sourceType":"module"}