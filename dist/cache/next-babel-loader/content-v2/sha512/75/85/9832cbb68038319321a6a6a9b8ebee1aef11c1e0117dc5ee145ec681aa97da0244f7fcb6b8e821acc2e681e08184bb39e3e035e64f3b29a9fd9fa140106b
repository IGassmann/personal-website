{"ast":null,"code":"var _jsxFileName = \"/Users/IGassmann/Developer/IGassmann/personal-website/src/pages/blog/page/[index].js\";\nvar __jsx = React.createElement;\nimport PostFeed from '@/components/Feed';\nimport Layout from '@/components/Layout';\nimport Pagination from '@/components/Pagination';\nimport { getPostBySlug } from '@/lib/api';\nimport React from 'react';\nexport var __N_SSG = true;\nexport default function Index(_ref) {\n  var siteTitle = _ref.siteTitle,\n      siteSubtitle = _ref.siteSubtitle,\n      postsPerPage = _ref.postsPerPage,\n      posts = _ref.posts;\n  var currentPage = 0;\n  var hasNextPage = true;\n  var hasPrevPage = false;\n  var prevPagePath = '/';\n  var nextPagePath = 'page/1';\n  var numberOfPages = Math.ceil(posts.length / postsPerPage);\n  var pages = [];\n\n  for (var index = 1; index <= numberOfPages; index++) {\n    pages.push({\n      params: {\n        page_index: index.toString()\n      }\n    });\n  }\n\n  var pageTitle = currentPage > 0 ? \"Posts - Page \".concat(currentPage, \" - \").concat(siteTitle) : siteTitle;\n  return __jsx(Layout, {\n    pageTitle: pageTitle,\n    pageDescription: siteSubtitle,\n    isIndex: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }\n  }, __jsx(PostFeed, {\n    posts: posts,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }\n  }), __jsx(Pagination, {\n    prevPagePath: prevPagePath,\n    nextPagePath: nextPagePath,\n    hasPrevPage: hasPrevPage,\n    hasNextPage: hasNextPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }));\n}\n_c = Index;\n\nvar _c;\n\n$RefreshReg$(_c, \"Index\");","map":{"version":3,"sources":["/Users/IGassmann/Developer/IGassmann/personal-website/src/pages/blog/page/[index].js"],"names":["PostFeed","Layout","Pagination","getPostBySlug","React","Index","siteTitle","siteSubtitle","postsPerPage","posts","currentPage","hasNextPage","hasPrevPage","prevPagePath","nextPagePath","numberOfPages","Math","ceil","length","pages","index","push","params","page_index","toString","pageTitle"],"mappings":";;AAAA,OAAOA,QAAP,MAAqB,mBAArB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,SAAsBC,aAAtB,QAA2C,WAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,eAAe,SAASC,KAAT,OAAiE;AAAA,MAAhDC,SAAgD,QAAhDA,SAAgD;AAAA,MAArCC,YAAqC,QAArCA,YAAqC;AAAA,MAAvBC,YAAuB,QAAvBA,YAAuB;AAAA,MAATC,KAAS,QAATA,KAAS;AAE9E,MAAMC,WAAW,GAAG,CAApB;AACA,MAAMC,WAAW,GAAG,IAApB;AACA,MAAMC,WAAW,GAAG,KAApB;AACA,MAAMC,YAAY,GAAG,GAArB;AACA,MAAMC,YAAY,GAAG,QAArB;AAEA,MAAMC,aAAa,GAAGC,IAAI,CAACC,IAAL,CAAUR,KAAK,CAACS,MAAN,GAAeV,YAAzB,CAAtB;AAEA,MAAIW,KAAK,GAAG,EAAZ;;AACA,OAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,IAAIL,aAA7B,EAA4CK,KAAK,EAAjD,EAAqD;AACnDD,IAAAA,KAAK,CAACE,IAAN,CAAW;AACTC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,UAAU,EAAEH,KAAK,CAACI,QAAN;AAAd;AADC,KAAX;AAGD;;AAGD,MAAMC,SAAS,GAAGf,WAAW,GAAG,CAAd,0BAAkCA,WAAlC,gBAAmDJ,SAAnD,IAAiEA,SAAnF;AAEA,SACE,MAAC,MAAD;AAAQ,IAAA,SAAS,EAAEmB,SAAnB;AAA8B,IAAA,eAAe,EAAElB,YAA/C;AAA6D,IAAA,OAAO,MAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,QAAD;AAAU,IAAA,KAAK,EAAEE,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,UAAD;AACE,IAAA,YAAY,EAAEI,YADhB;AAEE,IAAA,YAAY,EAAEC,YAFhB;AAGE,IAAA,WAAW,EAAEF,WAHf;AAIE,IAAA,WAAW,EAAED,WAJf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAWD;KA/BuBN,K","sourcesContent":["import PostFeed from '@/components/Feed';\nimport Layout from '@/components/Layout';\nimport Pagination from '@/components/Pagination';\nimport { getAllPosts, getPostBySlug } from '@/lib/api';\nimport React from 'react';\n\nexport default function Index({ siteTitle, siteSubtitle, postsPerPage, posts }) {\n\n  const currentPage = 0;\n  const hasNextPage = true;\n  const hasPrevPage = false;\n  const prevPagePath = '/';\n  const nextPagePath = 'page/1';\n\n  const numberOfPages = Math.ceil(posts.length / postsPerPage)\n\n  let pages = []\n  for (let index = 1; index <= numberOfPages; index++) {\n    pages.push({\n      params: { page_index: index.toString() },\n    })\n  }\n\n\n  const pageTitle = currentPage > 0 ? `Posts - Page ${currentPage} - ${siteTitle}` : siteTitle;\n\n  return (\n    <Layout pageTitle={pageTitle} pageDescription={siteSubtitle} isIndex>\n      <PostFeed posts={posts} />\n      <Pagination\n        prevPagePath={prevPagePath}\n        nextPagePath={nextPagePath}\n        hasPrevPage={hasPrevPage}\n        hasNextPage={hasNextPage}\n      />\n    </Layout>\n  );\n}\n\nexport async function getStaticProps() {\n  const { default: { title, description, postsPerPage } } = await import('@/site.config')\n\n  const posts = getAllPosts([\n    'title',\n    'description',\n    'category',\n    'publishedAt',\n    'slug',\n  ]);\n\n  return {\n    props: {\n      posts,\n      siteTitle: title,\n      siteSubtitle: description,\n      postsPerPage,\n    },\n  };\n}\n\nexport async function getStaticPaths() {\n  const { default: { postsPerPage } } = await import('@/site.config')\n\n  const posts = getAllPosts(['slug']);\n\n  const numberOfPages = Math.ceil(posts.length / postsPerPage)\n\n  let pagePaths = [];\n  for (let index = 1; index <= numberOfPages; index++) {\n    pagePaths.push({\n      params: { pageIndex: index },\n    })\n  }\n\n  return { paths: pagePaths, fallback: false };\n}"]},"metadata":{},"sourceType":"module"}